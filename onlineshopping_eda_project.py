# -*- coding: utf-8 -*-
"""onlineshopping-eda-project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11-Ij4b56qhQzdM2TL1eORIrhyJm0vZAF

<h1 style="background-color:purple;font-family:newtimeroman;font-size:200%;color:black;text-align:center;border-radius:20px 20px;"><b>EDA Project - Online Shopping</b></h1>

**Contains:**

- [Importing Libraries](#import-library)
- [Loading The Dataset](#loading-dataset)
- [Understanding The Dataset](#understanding-dataset)
- [Organizing Columns](#organizing-columns)
- [NaN Values](#nan-values)
- [Data Visualization](#data-visualization)
- [Conclusion](#conclusion)

<h1 id="import-library" style="color: Green;">Importing Libraries</h1>
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import missingno as msno
import plotly.express as px

!pip install skimpy


from skimpy import skim

import warnings
warnings.filterwarnings("ignore")

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

"""<h1 id="loading-dataset" style="color: Green;">Loading The Dataset</h1>"""

df0 = pd.read_csv("dataset.csv")
df = df0.copy()

df.head()

df.sample(5)

"""<h1 id="understanding-dataset" style="color: Green;">Understanding The Dataset</h1>"""

df.shape

df.info()

df.isnull().sum()

msno.matrix(df);

df.nunique()

df.duplicated().sum()

df.describe().T

df.describe(include= "object").T

skim(df)

"""<h1 id="organizing-columns" style="color: Green;">Organizing Columns</h1>"""

df.columns

df.columns = df.columns.str.lower()

df.columns = ['user_id', 'age', 'gender', 'country', 'purchase_amount',
       'purchase_date', 'category']

df.columns

"""<h2 id="o1" style="color: Red;">Age Column</h2>"""

df.age.unique()

df.age.isnull().sum()

df.age.dtype

"""The dtype of the age column will be changed after filling the NaN values.

<h2 id="o2" style="color: Red
;">Gender Column</h2>
"""

df.gender.unique()

df.gender.isnull().sum()

df.gender.dtype

"""The dtype of the gender column will be changed after filling the NaN values.

<h2 id="o3" style="color: Red;">Country Column</h2>
"""

df.country.unique()

df.country.isnull().sum()

df.country.dtype

"""The dtype of the country column will be changed after filling the NaN values.

<h2 id="o4" style="color: Red;">Purchase_amount Column</h2>
"""

df.purchase_amount.nunique()

df.purchase_amount.dtype

df.purchase_amount.unique()

"""<h2 id="o5" style="color: Red;">Purchase_date Column</h2>"""

df.purchase_date.nunique()

df.purchase_date.unique()

df.purchase_date.dtype

"""The dtype of the purchase_date column will be changed after filling the NaN values.

<h2 id="o6" style="color: Red;">Category Column</h2>
"""

df.category.unique()

"""The dtype of the category column will be changed after filling the NaN values.

<h1 id="nan-values" style="color: navy;">NaN Values</h1>
NaN or Not a Number are special values in DataFrame and numpy arrays that represent the missing of value in a cell. In programming languages they are also represented, for example in Python they are represented as None value. You may think that None (or NaN) values are just zeroes because they represent the absence of a value.

<h2 id="n1" style="color: Red;">NaN Values In Country Column</h2>
"""

df.country.isnull().sum()

df.country.value_counts()

countries = df.country.value_counts().index
countries

df['country'] = df['country'].apply(lambda x: x if pd.notna(x) else np.random.choice(countries))

df.country.value_counts()

df.country.isnull().sum()

"""<h2 id="n2" style="color: red;">NaN Values In Category Column</h2>"""

df.category.isnull().sum()

df['category'] = df['category'].fillna(df.groupby('country')['category'].transform(lambda x: x.mode().iloc[0] if not x.mode().empty else None))

df.category.isnull().sum()

"""<h2 id="n3" style="color: red;">NaN Values In Gender Column</h2>"""

df.gender.isnull().sum()

df.gender.value_counts()

df.groupby(["category", "country"])["gender"].apply(lambda x: x.mode().iloc[0] if not x.mode().empty else None)

df['gender'] = df['gender'].fillna(df.groupby(["category", "country"])["gender"].transform(lambda x: x.mode().iloc[0] if not x.mode().empty else None))

df.gender.isnull().sum()

"""<h2 id="n4" style="color: Red;">NaN Values In Age Column</h2>"""

df.age.isnull().sum()

df.age.mean()

df.age.median()

df.groupby(['category', 'gender'])['age'].mean().round(0)

df['age'] = df['age'].fillna(df.groupby(['category', 'gender'])['age'].transform("mean")).round(0)

df.age.isnull().sum()

"""<h2 id="n5" style="color: Red;">NaN Values In purchase_amount Column</h2>"""

df.purchase_date.isnull().sum()

df.groupby(['country', 'category'])['purchase_amount'].mean()

df["purchase_amount"] = df["purchase_amount"].fillna(df.groupby(['country', 'category'])['purchase_amount'].transform('mean'))

df.purchase_amount.isnull().sum()

"""<h2 id="n6" style="color: Red;">NaN Values In Purchase_date Column</h2>"""

df.purchase_amount.isnull().sum()

df['purchase_date'] = df.groupby(['country', 'category'])['purchase_date'].transform(lambda x: x.fillna(x.mode()[0] if not x.mode().empty else np.nan))

df.purchase_amount.isnull().sum()

# after filling the NaN values
df.isnull().sum().sum()

msno.matrix(df);

"""<h3 id="n7" style="color: Red;">Changing Dtypes of Columns</h3>"""

df.age = df.age.astype("int")

df['purchase_date'] = pd.to_datetime(df['purchase_date'])

df['category'] = df['category'].astype('category')

df['gender'] = df['gender'].astype('category')

df.info()

"""<h1 id="data-visualization" style="color: Green;">Data Visualization</h1>

<h2 id="dv1" style="color: #40E0D0;">Distribution of Gender</h2>
"""

gender_counts = df['gender'].value_counts()

plt.figure(figsize=(8, 5))
ax1 = gender_counts.plot(kind='bar', color= ['lightcoral', 'lightskyblue', 'teal'])

for container in ax1.containers:
    ax1.bar_label(container, fmt='%d', label_type='edge', fontsize=9, color='black', padding=2)

plt.title('Gender Distribution')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.xticks(rotation=0)

plt.show()

"""This graph illustrates the gender distribution within the dataset. The numbers of male and female users are nearly equal, indicating a balanced gender representation. The "other" category, while smaller, still represents a meaningful portion of users that should not be overlooked. The balanced gender distribution suggests that purchase behaviors or user activity may be similar across male and female groups. However, the "other" category, though smaller, should also be considered in future analyses to understand their specific purchasing patterns or behaviors.

<h2 id="dv2" style="color: #40E0D0;">Distributions of Total Purchase Amount by Country</h2>
"""

top_countries = df.groupby('country')['purchase_amount'].sum().nlargest(10)

plt.figure(figsize=(10, 6))
ax2 = top_countries.plot(kind='bar', color= ["#001f3f", "#003366", "#004080", "#0059b3", "#0073e6", "#3399ff"])

for container in ax2.containers:
    ax2.bar_label(container, fmt='%d', label_type='edge', fontsize=9, color='black', padding=2)

plt.xlabel('Country')
plt.ylabel('Total Purchase Amount')
plt.xticks(rotation=0)

plt.show()

"""This graph compares the total purchase amounts across different countries. We observe that the purchase amounts are fairly consistent across all countries, with **France, Canada, and Germany leading slightly**. This suggests a global customer base with relatively balanced spending across regions. Such an analysis indicates that businesses might not need to tailor distinct strategies for individual countries since spending behavior is relatively consistent across regions. However, small differences could still offer insights for fine-tuning marketing strategies.

<h2 id="dv3" style="color: #40E0D0;">Prices by Product Category</h2>
"""

plt.figure(figsize=(8, 6))
sns.boxplot(x='category', y='purchase_amount', data=df, palette='tab20c')
plt.title("Prices by Product Categories")
plt.xticks(rotation=90)
plt.xlabel("Category")
plt.ylabel("Purchase Amount")
plt.show()

"""The boxplot illustrates the price distribution across product categories. Prices are generally within a similar range, though some categories like **"Home & Kitchen"** and **"Books"** show slightly higher median prices. This could indicate that these categories contain more expensive products compared to others. The presence of outliers in several categories suggests either luxury or discounted items, providing opportunities for further segmentation or targeted promotions. Understanding these price distributions can help in aligning pricing strategies with customer expectations.

<h2 id="dv4" style="color: #40E0D0;">Age Distribution</h2>
"""

plt.hist(df['age'], bins=20, color='skyblue', edgecolor='black')

plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')

plt.show()

"""The age distribution graph shows the spread of users by age, with the highest concentration around age 25. This indicates that the majority of users are younger, with a smaller peak in the 30s. The large presence of younger users suggests that they might be more active in purchasing or engaging with products. Marketing strategies targeting this age group could yield better results. However, older users should not be overlooked, as they may have greater purchasing power despite their smaller representation.

<h2 id="dv5" style="color: #40E0D0;">Total Purchase Amount by Gender</h2>
"""

ax3 = df.groupby('gender')['purchase_amount'].sum().plot(kind='bar', color=['lightcoral', 'lightskyblue', 'teal'])

for container in ax3.containers:
    ax3.bar_label(container, fmt='%d', label_type='edge', fontsize=9, color='black', padding=1)

plt.title('Total Purchase Amount by Gender')
plt.xlabel('Gender')
plt.ylabel('Total Purchase Amount')
plt.xticks(rotation=0)

plt.show()

"""This graph compares the total purchase amounts by gender, showing that male and female users have nearly identical spending levels. The "other" category has significantly lower total purchases. This suggests that purchasing behavior is similar across male and female users.

<h2 id="dv6" style="color: #40E0D0;">Purchase Distribution by Country</h2>
"""

df.groupby('country')['purchase_amount'].sum().plot(kind='pie',
                                                    autopct='%1.2f%%',
                                                    explode= [0,0,0.15,0,0,0],
                                                    colormap='Set3'
                                                   )

plt.title('Purchase Distribution by Country')
plt.ylabel('')

plt.show()

"""The pie chart illustrates the distribution of purchases by country, with France, Australia, and the USA contributing the most. While these countries dominate the market, other regions like Germany and the UK also make significant contributions. This distribution helps identify the strongest markets and potential areas for growth or expansion.

<h2 id="dv7" style="color: #40E0D0;">Gender Distribution by Country</h2>
"""

ax4 = df.groupby(['country', 'gender'])['user_id'].count().unstack().plot(kind='bar',
                                                                          stacked=True,
                                                                          color=['lightcoral', 'lightskyblue', 'teal']
                                                                         )

for container in ax4.containers:
    ax4.bar_label(container, fmt='%d', label_type='center', fontsize=9, color='black', padding=2)

plt.title('Gender Distribution by Country')
plt.xlabel('Country')
plt.ylabel('Number of Users')
plt.xticks(rotation= 30)
plt.legend(bbox_to_anchor= (1.23,1.07))

plt.show()

"""The stacked bar chart displays gender distribution by country, showing a balanced representation of male and female users across all regions. The "other" category has fewer users in every country. This data suggests that marketing strategies can be designed with gender balance in mind for each region, though specialized approaches might be necessary for the "other" category.

<h1 id="conclusion" style="color: Green;">Conclusion</h1>

In this project, several steps were taken to analyze user behavior and demographic information. Initially, the missing (NaN) values in the dataset were filled using various imputation techniques, ensuring that the dataset was complete and reliable. After addressing the NaN values, data visualization techniques were applied to understand the overall structure of the dataset.

The analyses focused on examining distributions of variables such as gender, age, country, and purchase amounts, which revealed the demographic and geographic composition of the user base. For instance, the gender distribution charts indicated a balanced user base of both male and female users, while the age distribution showed that young adults, particularly those between 25-30 years old, were more active. Additionally, examining total purchase amounts by country revealed relatively balanced spending across different regions.

These visualizations provided valuable insights into which demographic groups could be targeted in future business strategies and which geographic markets might require more focus. Tailored marketing strategies based on age groups and gender distributions could prove useful for identifying growth opportunities.

Overall, this project has facilitated the correction of data gaps and the extraction of key user insights through visualizations. The findings can be utilized to optimize marketing strategies and gain a better understanding of customer segments, ultimately supporting improved decision-making and business performance.
"""